{"ast":null,"code":"var _jsxFileName = \"/Users/javraadm/Desktop/react-project/react-todo-app/src/containers/OnlineReminders.js\";\nimport React, { useState, useEffect } from 'react';\nexport default (() => {\n  const [onlineList, setOnlineList] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  async function fetchData() {\n    await fetch(\"https://jsonplaceholder.typicode.com/todos\").then(res => res.json()).then(response => {\n      setOnlineList(getUnique(response, 'userId'));\n      setIsLoading(false);\n    }).catch(setError(error));\n  }\n\n  function getUnique(arr, comp) {\n    const unique = arr.map(e => e[comp]).map((e, i, final) => final.indexOf(e) === i && i).filter(e => arr[e]).map(e => arr[e]);\n    return unique;\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []); //here we don't need to pass this empty array , but it can be useful when we need to just re render component when specific obj changes\n\n  return React.createElement(\"div\", {\n    className: \"reminder-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Here are the list of available random reminders below:\"), isLoading && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Wait!!! Loading reminders for you ...\"), React.createElement(\"ul\", {\n    className: \"reminder-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, onlineList.map(listItem => React.createElement(\"li\", {\n    key: listItem.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"listItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, listItem.title), React.createElement(\"div\", {\n    className: \"actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, listItem.completed ? 'COMPLETED' : 'INPROGRESS'))))));\n});","map":{"version":3,"sources":["/Users/javraadm/Desktop/react-project/react-todo-app/src/containers/OnlineReminders.js"],"names":["React","useState","useEffect","onlineList","setOnlineList","error","setError","isLoading","setIsLoading","fetchData","fetch","then","res","json","response","getUnique","catch","arr","comp","unique","map","e","i","final","indexOf","filter","listItem","userId","title","completed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,gBAAe,MAAM;AAEpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;;AAEA,iBAAeQ,SAAf,GAA2B;AAC1B,UAAMC,KAAK,CAAC,4CAAD,CAAL,CACJC,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADR,EAEJF,IAFI,CAECG,QAAQ,IAAI;AACjBV,MAAAA,aAAa,CAACW,SAAS,CAACD,QAAD,EAAW,QAAX,CAAV,CAAb;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,KALI,EAMJQ,KANI,CAMEV,QAAQ,CAACD,KAAD,CANV,CAAN;AAOA;;AAED,WAASU,SAAT,CAAmBE,GAAnB,EAAwBC,IAAxB,EAA8B;AAC7B,UAAMC,MAAM,GAAGF,GAAG,CAChBG,GADa,CACTC,CAAC,IAAIA,CAAC,CAACH,IAAD,CADG,EAEbE,GAFa,CAET,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,KAAiBA,KAAK,CAACC,OAAN,CAAcH,CAAd,MAAqBC,CAArB,IAA0BA,CAFlC,EAGbG,MAHa,CAGNJ,CAAC,IAAIJ,GAAG,CAACI,CAAD,CAHF,EAGOD,GAHP,CAGWC,CAAC,IAAIJ,GAAG,CAACI,CAAD,CAHnB,CAAf;AAIA,WAAOF,MAAP;AACA;;AAEDjB,EAAAA,SAAS,CAAC,MAAM;AACfO,IAAAA,SAAS;AACT,GAFQ,EAEN,EAFM,CAAT,CAxBoB,CA0BZ;;AAER,SACC;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADD,EAEEF,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAFf,EAGC;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEJ,UAAU,CAACiB,GAAX,CAAeM,QAAQ,IACvB;AAAI,IAAA,GAAG,EAAEA,QAAQ,CAACC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBD,QAAQ,CAACE,KAAlC,CADD,EAEC;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkDF,QAAQ,CAACG,SAAT,GAAqB,WAArB,GAAmC,YAArF,CADD,CAFD,CADA,CADF,CAHD,CADD;AAiBA,CA7CD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nexport default () => {\n\n\tconst [onlineList, setOnlineList] = useState([]);\n\tconst [error, setError] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\tasync function fetchData() {\n\t\tawait fetch(\"https://jsonplaceholder.typicode.com/todos\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(response => {\n\t\t\t\tsetOnlineList(getUnique(response, 'userId'));\n\t\t\t\tsetIsLoading(false);\n\t\t\t})\n\t\t\t.catch(setError(error));\n\t}\n\n\tfunction getUnique(arr, comp) {\n\t\tconst unique = arr\n\t\t\t.map(e => e[comp])\n\t\t\t.map((e, i, final) => final.indexOf(e) === i && i)\n\t\t\t.filter(e => arr[e]).map(e => arr[e]);\n\t\treturn unique;\n\t}\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []); //here we don't need to pass this empty array , but it can be useful when we need to just re render component when specific obj changes\n\n\treturn (\n\t\t<div className=\"reminder-container\">\n\t\t\t<h4>Here are the list of available random reminders below:</h4>\n\t\t\t{isLoading && <p>Wait!!! Loading reminders for you ...</p>}\n\t\t\t<ul className=\"reminder-list\">\n\t\t\t\t{onlineList.map(listItem => (\n\t\t\t\t\t<li key={listItem.userId}>\n\t\t\t\t\t\t<p className=\"listItem\">{listItem.title}</p>\n\t\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-status\">{listItem.completed ? 'COMPLETED' : 'INPROGRESS'}</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};"]},"metadata":{},"sourceType":"module"}