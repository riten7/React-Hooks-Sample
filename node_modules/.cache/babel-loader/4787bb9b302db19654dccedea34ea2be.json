{"ast":null,"code":"var _jsxFileName = \"/Users/javraadm/Desktop/react-project/react-todo-app/src/containers/OnlineReminders.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { showOnlineReminder, showActiveOnlineReminder, showCompletedOnlineReminder } from '../actions/actionCreators';\n\nfunction OnlineReminders(props) {\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isShown, setIsShown] = useState(false);\n\n  async function fetchData() {\n    await fetch(\"https://jsonplaceholder.typicode.com/todos\").then(res => res.json()).then(response => {\n      props.showOnlineReminder(getUnique(response, 'userId'));\n      setIsLoading(false);\n    }).catch(setError(error));\n  }\n\n  function getUnique(arr, comp) {\n    const unique = arr.map(e => e[comp]).map((e, i, final) => final.indexOf(e) === i && i).filter(e => arr[e]).map(e => arr[e]);\n    return unique;\n  }\n\n  useEffect(() => {\n    if (isShown) {\n      setIsLoading(true);\n      fetchData();\n    }\n  }, [isShown]);\n  return React.createElement(\"div\", {\n    className: \"reminder-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/#\",\n    onClick: () => setIsShown(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Click here\"), isShown && React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Here are the list of available random reminders below:\"), isLoading && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Wait!!! Loading reminders for you ...\"), console.log('here ut coem', props), React.createElement(\"div\", {\n    className: \"reminder-filter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-showAll\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"All\"), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-showActive\",\n    onClick: () => props.showActiveOnlineReminder(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Active\"), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-showCompleted\",\n    onClick: () => props.showCompletedOnlineReminder(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Completed\")), React.createElement(\"ul\", {\n    className: \"reminder-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.onlineReminderList.length > 0 && props.onlineReminderList[0].map(listItem => React.createElement(\"li\", {\n    key: listItem.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"listItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, listItem.title), React.createElement(\"div\", {\n    className: \"actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: listItem.completed ? 'btn btn-complete' : 'btn btn-inprogress',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, listItem.completed ? 'COMPLETED' : 'INPROGRESS'))))));\n}\n\nconst mapStateToProps = state => ({\n  onlineReminderList: state.OnlineReminderReducer\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    showOnlineReminder,\n    showActiveOnlineReminder,\n    showCompletedOnlineReminder\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OnlineReminders);","map":{"version":3,"sources":["/Users/javraadm/Desktop/react-project/react-todo-app/src/containers/OnlineReminders.js"],"names":["React","useState","useEffect","connect","bindActionCreators","showOnlineReminder","showActiveOnlineReminder","showCompletedOnlineReminder","OnlineReminders","props","error","setError","isLoading","setIsLoading","isShown","setIsShown","fetchData","fetch","then","res","json","response","getUnique","catch","arr","comp","unique","map","e","i","final","indexOf","filter","console","log","onlineReminderList","length","listItem","userId","title","completed","mapStateToProps","state","OnlineReminderReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { showOnlineReminder, showActiveOnlineReminder, showCompletedOnlineReminder } from '../actions/actionCreators';\n\n\nfunction OnlineReminders(props) {\n\tconst [error, setError] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isShown, setIsShown] = useState(false);\n\n\tasync function fetchData() {\n\t\tawait fetch(\"https://jsonplaceholder.typicode.com/todos\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(response => {\n\t\t\t\tprops.showOnlineReminder(getUnique(response, 'userId'));\n\t\t\t\tsetIsLoading(false);\n\t\t\t})\n\t\t\t.catch(setError(error));\n\t}\n\n\tfunction getUnique(arr, comp) {\n\t\tconst unique = arr\n\t\t\t.map(e => e[comp])\n\t\t\t.map((e, i, final) => final.indexOf(e) === i && i)\n\t\t\t.filter(e => arr[e]).map(e => arr[e]);\n\t\treturn unique;\n\t}\n\n\tuseEffect(() => {\n\t\tif (isShown){\n\t\t\tsetIsLoading(true)\n\t\t  fetchData();\n\t\t}\n\t}, [isShown]);\n\n\treturn (\n\t\t<div className=\"reminder-container\">\n\t\t\t<a href=\"/#\" onClick={() => setIsShown(true)}>Click here</a>\n\t\t\t{isShown && <h4>Here are the list of available random reminders below:</h4>}\n\t\t\t{isLoading && <p>Wait!!! Loading reminders for you ...</p>}\n\t\t\t{console.log('here ut coem', props)}\n\t\t\t<div className=\"reminder-filter\">\n\t\t\t\t<button type=\"button\" className=\"btn btn-showAll\">All</button>\n\t\t\t\t<button type=\"button\" className=\"btn btn-showActive\"\n\t\t\t\t\tonClick={() => props.showActiveOnlineReminder()}>Active</button>\n\t\t\t\t<button type=\"button\" className=\"btn btn-showCompleted\"\n\t\t\t\t\tonClick={() => props.showCompletedOnlineReminder()}>Completed</button>\n\t\t\t</div>\n\t\t\t<ul className=\"reminder-list\">\n\t\t\t\t{props.onlineReminderList.length > 0 && props.onlineReminderList[0].map(listItem => (\n\t\t\t\t\t<li key={listItem.userId}>\n\t\t\t\t\t\t<p className=\"listItem\">{listItem.title}</p>\n\t\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t\t<button type=\"button\" className={listItem.completed ? 'btn btn-complete' : 'btn btn-inprogress'} >{listItem.completed ? 'COMPLETED' : 'INPROGRESS'}</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = state => ({\n\tonlineReminderList: state.OnlineReminderReducer\n});\n\nconst mapDispatchToProps = dispatch => {\n\treturn bindActionCreators({\n\t\tshowOnlineReminder,\n\t\tshowActiveOnlineReminder,\n\t\tshowCompletedOnlineReminder\n\t}, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps) (OnlineReminders);"]},"metadata":{},"sourceType":"module"}