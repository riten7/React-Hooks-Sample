{"ast":null,"code":"var _jsxFileName = \"/Users/javraadm/Desktop/react-project/react-todo-app/src/containers/OnlineReminders.js\";\nimport React, { useState, useEffect } from 'react';\nexport default (() => {\n  const [onlineList, setOnlineList] = useState([]);\n  const [error, setError] = useState(false);\n\n  async function fetchData() {\n    await fetch(\"https://jsonplaceholder.typicode.com/todos\").then(res => res.json()).then(response => {\n      setOnlineList(getUnique(response, 'userId'));\n    }).catch(setError(error));\n  }\n\n  function getUnique(arr, comp) {\n    const unique = arr.map(e => e[comp]).map((e, i, final) => final.indexOf(e) === i && i).filter(e => arr[e]).map(e => arr[e]);\n    return unique;\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []); //here we don't need to pass this empty array , but it can be useful when we need to just re render component when specific obj changes\n\n  return React.createElement(\"div\", {\n    className: \"reminder-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, console.log('test', onlineList), React.createElement(\"ul\", {\n    className: \"reminder-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, onlineList.map(listItem => React.createElement(\"li\", {\n    key: listItem.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"listItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, listItem.title), React.createElement(\"div\", {\n    className: \"actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, listItem.completed ? 'COMPLETED' : 'INPROGRESS'))))));\n});","map":{"version":3,"sources":["/Users/javraadm/Desktop/react-project/react-todo-app/src/containers/OnlineReminders.js"],"names":["React","useState","useEffect","onlineList","setOnlineList","error","setError","fetchData","fetch","then","res","json","response","getUnique","catch","arr","comp","unique","map","e","i","final","indexOf","filter","console","log","listItem","userId","title","completed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,gBAAe,MAAM;AAEpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;;AAEA,iBAAeM,SAAf,GAA2B;AAC1B,UAAMC,KAAK,CAAC,4CAAD,CAAL,CACLC,IADK,CACAC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADP,EAELF,IAFK,CAEAG,QAAQ,IAAI;AACjBR,MAAAA,aAAa,CAACS,SAAS,CAACD,QAAD,EAAW,QAAX,CAAV,CAAb;AACA,KAJK,EAKLE,KALK,CAKCR,QAAQ,CAACD,KAAD,CALT,CAAN;AAMA;;AAED,WAASQ,SAAT,CAAmBE,GAAnB,EAAwBC,IAAxB,EAA8B;AAC7B,UAAMC,MAAM,GAAGF,GAAG,CACfG,GADY,CACRC,CAAC,IAAIA,CAAC,CAACH,IAAD,CADE,EAEZE,GAFY,CAER,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,KAAiBA,KAAK,CAACC,OAAN,CAAcH,CAAd,MAAqBC,CAArB,IAA0BA,CAFnC,EAGZG,MAHY,CAGLJ,CAAC,IAAIJ,GAAG,CAACI,CAAD,CAHH,EAGQD,GAHR,CAGYC,CAAC,IAAIJ,GAAG,CAACI,CAAD,CAHpB,CAAf;AAIE,WAAOF,MAAP;AACH;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACfK,IAAAA,SAAS;AACT,GAFQ,EAEN,EAFM,CAAT,CAtBoB,CAwBZ;;AAER,SACC;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiB,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBtB,UAApB,CADH,EAEC;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,UAAU,CAACe,GAAX,CAAeQ,QAAQ,IACrB;AAAI,IAAA,GAAG,EAAEA,QAAQ,CAACC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBD,QAAQ,CAACE,KAAlC,CADD,EAEC;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkDF,QAAQ,CAACG,SAAT,GAAqB,WAArB,GAAmC,YAArF,CADD,CAFD,CADF,CADF,CAFD,CADD;AAgBA,CA1CD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nexport default () => {\n\n\tconst [onlineList, setOnlineList] = useState([]);\n\tconst [error, setError] = useState(false);\n\n\tasync function fetchData() {\n\t\tawait fetch(\"https://jsonplaceholder.typicode.com/todos\")\n\t\t.then(res => res.json())\n\t\t.then(response => {\n\t\t\tsetOnlineList(getUnique(response, 'userId'));\n\t\t})\n\t\t.catch(setError(error));\n\t}\n\n\tfunction getUnique(arr, comp) {\n  const unique = arr\n    .map(e => e[comp])\n    .map((e, i, final) => final.indexOf(e) === i && i)\n    .filter(e => arr[e]).map(e => arr[e]);\n    return unique;\n}\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []); //here we don't need to pass this empty array , but it can be useful when we need to just re render component when specific obj changes\n\n\treturn (\n\t\t<div className=\"reminder-container\">\n\t\t\t{ console.log('test', onlineList)}\n\t\t\t<ul className=\"reminder-list\">\n\t\t\t\t{onlineList.map(listItem => (\n\t\t\t\t\t\t\t<li key={listItem.userId}>\n\t\t\t\t\t\t\t\t<p className=\"listItem\">{listItem.title}</p>\n\t\t\t\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-status\">{listItem.completed ? 'COMPLETED' : 'INPROGRESS'}</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};"]},"metadata":{},"sourceType":"module"}